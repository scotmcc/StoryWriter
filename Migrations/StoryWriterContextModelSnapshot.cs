// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StoryWriter.Data;

#nullable disable

namespace StoryWriter.Migrations
{
    [DbContext(typeof(StoryWriterContext))]
    partial class StoryWriterContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.6");

            modelBuilder.Entity("ChapterEntityCharacterEntity", b =>
                {
                    b.Property<Guid>("ChaptersId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CharactersId")
                        .HasColumnType("TEXT");

                    b.HasKey("ChaptersId", "CharactersId");

                    b.HasIndex("CharactersId");

                    b.ToTable("ChapterEntityCharacterEntity");
                });

            modelBuilder.Entity("ChapterEntitySceneEntity", b =>
                {
                    b.Property<Guid>("ChaptersId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ScenesId")
                        .HasColumnType("TEXT");

                    b.HasKey("ChaptersId", "ScenesId");

                    b.HasIndex("ScenesId");

                    b.ToTable("ChapterEntitySceneEntity");
                });

            modelBuilder.Entity("CharacterEntitySceneEntity", b =>
                {
                    b.Property<Guid>("CharactersId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ScenesId")
                        .HasColumnType("TEXT");

                    b.HasKey("CharactersId", "ScenesId");

                    b.HasIndex("ScenesId");

                    b.ToTable("CharacterEntitySceneEntity");
                });

            modelBuilder.Entity("ItemEntitySceneEntity", b =>
                {
                    b.Property<Guid>("ItemsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ScenesId")
                        .HasColumnType("TEXT");

                    b.HasKey("ItemsId", "ScenesId");

                    b.HasIndex("ScenesId");

                    b.ToTable("ItemEntitySceneEntity");
                });

            modelBuilder.Entity("LocationEntitySceneEntity", b =>
                {
                    b.Property<Guid>("LocationsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ScenesId")
                        .HasColumnType("TEXT");

                    b.HasKey("LocationsId", "ScenesId");

                    b.HasIndex("ScenesId");

                    b.ToTable("LocationEntitySceneEntity");
                });

            modelBuilder.Entity("StoryWriter.Data.Entities.ChapterEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ItemEntityId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StoryId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ItemEntityId");

                    b.HasIndex("StoryId");

                    b.ToTable("Chapters");
                });

            modelBuilder.Entity("StoryWriter.Data.Entities.CharacterEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StoryId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("StoryId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("StoryWriter.Data.Entities.ItemEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StoryId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("StoryId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("StoryWriter.Data.Entities.LocationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ItemEntityId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StoryId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ItemEntityId");

                    b.HasIndex("StoryId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("StoryWriter.Data.Entities.SceneEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Sequence")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("StoryId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Sequence")
                        .IsUnique();

                    b.HasIndex("StoryId");

                    b.ToTable("Scenes");
                });

            modelBuilder.Entity("StoryWriter.Data.Entities.StoryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Genre")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Stories");
                });

            modelBuilder.Entity("ChapterEntityCharacterEntity", b =>
                {
                    b.HasOne("StoryWriter.Data.Entities.ChapterEntity", null)
                        .WithMany()
                        .HasForeignKey("ChaptersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoryWriter.Data.Entities.CharacterEntity", null)
                        .WithMany()
                        .HasForeignKey("CharactersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChapterEntitySceneEntity", b =>
                {
                    b.HasOne("StoryWriter.Data.Entities.ChapterEntity", null)
                        .WithMany()
                        .HasForeignKey("ChaptersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoryWriter.Data.Entities.SceneEntity", null)
                        .WithMany()
                        .HasForeignKey("ScenesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterEntitySceneEntity", b =>
                {
                    b.HasOne("StoryWriter.Data.Entities.CharacterEntity", null)
                        .WithMany()
                        .HasForeignKey("CharactersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoryWriter.Data.Entities.SceneEntity", null)
                        .WithMany()
                        .HasForeignKey("ScenesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ItemEntitySceneEntity", b =>
                {
                    b.HasOne("StoryWriter.Data.Entities.ItemEntity", null)
                        .WithMany()
                        .HasForeignKey("ItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoryWriter.Data.Entities.SceneEntity", null)
                        .WithMany()
                        .HasForeignKey("ScenesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LocationEntitySceneEntity", b =>
                {
                    b.HasOne("StoryWriter.Data.Entities.LocationEntity", null)
                        .WithMany()
                        .HasForeignKey("LocationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoryWriter.Data.Entities.SceneEntity", null)
                        .WithMany()
                        .HasForeignKey("ScenesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StoryWriter.Data.Entities.ChapterEntity", b =>
                {
                    b.HasOne("StoryWriter.Data.Entities.ItemEntity", null)
                        .WithMany("Chapters")
                        .HasForeignKey("ItemEntityId");

                    b.HasOne("StoryWriter.Data.Entities.StoryEntity", "Story")
                        .WithMany("Chapters")
                        .HasForeignKey("StoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Story");
                });

            modelBuilder.Entity("StoryWriter.Data.Entities.CharacterEntity", b =>
                {
                    b.HasOne("StoryWriter.Data.Entities.StoryEntity", "Story")
                        .WithMany("Characters")
                        .HasForeignKey("StoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Story");
                });

            modelBuilder.Entity("StoryWriter.Data.Entities.ItemEntity", b =>
                {
                    b.HasOne("StoryWriter.Data.Entities.CharacterEntity", "Character")
                        .WithMany("Items")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoryWriter.Data.Entities.StoryEntity", "Story")
                        .WithMany("Items")
                        .HasForeignKey("StoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Story");
                });

            modelBuilder.Entity("StoryWriter.Data.Entities.LocationEntity", b =>
                {
                    b.HasOne("StoryWriter.Data.Entities.ItemEntity", null)
                        .WithMany("Locations")
                        .HasForeignKey("ItemEntityId");

                    b.HasOne("StoryWriter.Data.Entities.StoryEntity", "Story")
                        .WithMany("Locations")
                        .HasForeignKey("StoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Story");
                });

            modelBuilder.Entity("StoryWriter.Data.Entities.SceneEntity", b =>
                {
                    b.HasOne("StoryWriter.Data.Entities.StoryEntity", "Story")
                        .WithMany("Scenes")
                        .HasForeignKey("StoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Story");
                });

            modelBuilder.Entity("StoryWriter.Data.Entities.CharacterEntity", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("StoryWriter.Data.Entities.ItemEntity", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("Locations");
                });

            modelBuilder.Entity("StoryWriter.Data.Entities.StoryEntity", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("Characters");

                    b.Navigation("Items");

                    b.Navigation("Locations");

                    b.Navigation("Scenes");
                });
#pragma warning restore 612, 618
        }
    }
}
