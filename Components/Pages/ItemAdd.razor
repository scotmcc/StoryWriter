@page "/itemAdd"

@using StoryWriter.Services
@using StoryWriter.Data.Entities
@using StoryWriter.Components.Layout
@using StoryWriter.Components.Elements

@inject NavigationManager NavigationManager
@inject ItemService ItemService
@inject StoryService StoryService
@inject CharacterService CharacterService
@inject AIService AIService

<div class="row">
    <div class="col-8">
        <div class="card h-100">
            <div class="card-header">
                <h3 class="card-title">Add Item</h3>
            </div>
            <div class="card-body">
                <ItemForm Item="@Item" Stories="@Stories" Characters="@Characters" OnStoryChange="OnStoryChange"
                    OnCharacterchange="OnCharacterChange" />
            </div>
            <div class="card-footer">
                <button class="btn btn-primary" @onclick="AddItem">Save Item</button>
            </div>
        </div>
    </div>
    <div class="col-4">
        <AISuggestion ApplySuggestion="ApplySuggestion" GenerateSuggestion="GetSuggestion" suggestion="@suggestion" />
    </div>
</div>

@code {
    [CascadingParameter]
    private MainLayout MainLayout { get; set; } = default!;
    private ItemEntity Item = new ItemEntity();
    private List<StoryEntity> Stories = new List<StoryEntity>();
    private List<CharacterEntity> Characters = new List<CharacterEntity>();
    private string suggestion = "AI Suggestion will be here...";

    protected override async Task OnInitializedAsync()
    {
        Stories = (await StoryService.GetAllAsync()).ToList();
        Characters = (await CharacterService.GetAllAsync()).ToList();
        foreach (var story in Stories)
        {
            Console.WriteLine($"{story.Title} - {story.Id}");
        }
    }

    private async Task AddItem()
    {
        await ItemService.CreateAsync(Item);
        NavigationManager.NavigateTo("/itemList");
    }

    private async Task OnStoryChange(ChangeEventArgs e)
    {
        if (e.Value == null || e.Value.ToString() == "")
        {
            return;
        }
        var storyId = Guid.Parse(e.Value!.ToString()!);
        Item.Story = await StoryService.GetByIdAsync(storyId) ?? new StoryEntity();
        Characters = Item.Story.Characters.ToList();
    }

    private async Task OnCharacterChange(ChangeEventArgs e)
    {
        if (e.Value == null)
        {
            return;
        }
        var characterId = Guid.Parse(e.Value!.ToString()!);
        Item.Character = await CharacterService.GetByIdAsync(characterId) ?? new CharacterEntity();
    }

    private async Task GetSuggestion()
    {
        MainLayout.ShowLoading(true);
        suggestion = await AIService.GetItemDescription(Item) ?? "No suggestion available.";
        MainLayout.ShowLoading(false);
    }

    private void ApplySuggestion()
    {
        Item.Description = suggestion;
    }
}
