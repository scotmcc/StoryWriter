@page "/sceneAdd"

@using StoryWriter.Data.Entities
@using StoryWriter.Services
@using StoryWriter.Components.Layout
@using StoryWriter.Components.Elements

@inject NavigationManager NavigationManager
@inject SceneService SceneService
@inject StoryService StoryService
@inject CharacterService CharacterService
@inject AIService AIService
@inject IJSRuntime JSRuntime

<div class="row">
    <div class="col-8">
        <div class="card h-100">
            <div class="card-header">
                <h3 class="card-title">Add Scene</h3>
            </div>
            <div class="card-body">
                <div class="form-group mb-2">
                    <label for="title" class="form-label">Title</label>
                    <input id="title" class="form-control" @bind="Scene.Title" placeholder="Scene title..." />
                </div>
                <div class="form-group mb-2">
                    <label for="description" class="form-label">Description</label>
                    <textarea id="description" class="form-control" @bind="Scene.Description"
                        placeholder="Scene description..."></textarea>
                </div>
                <div class="form-group mb-2">
                    <label for="story" class="form-label">Story</label>
                    <select id="story" class="form-control" @onchange="OnStoryChange">
                        <option value="">Select a story...</option>
                        @foreach (var story in Stories)
                        {
                            <option value="@story.Id">@story.Title</option>
                        }
                    </select>
                </div>
                <div class="form-group mb-2">
                    <label for="character" class="form-label">Characters</label>
                    <select id="character" class="form-control" multiple @onchange="OnCharacterChange">
                        @foreach (var character in Characters)
                        {
                            <option value="@character.Id" selected="@SelectedCharacters.Contains(character)">@character.Name
                            </option>
                        }
                    </select>
                </div>
            </div>
            <div class="card-footer">
                <button class="btn btn-primary" @onclick="AddScene">Save Scene</button>
            </div>
        </div>
    </div>
    <div class="col-4">
        <AISuggestion suggestion="@suggestion" ApplySuggestion="AddScene" GenerateSuggestion="GenerateSuggestion" />
    </div>
</div>


@code {
    [CascadingParameter]
    public MainLayout MainLayout { get; set; } = default!;
    private SceneEntity Scene = new SceneEntity();
    private List<StoryEntity> Stories = new List<StoryEntity>();
    private List<CharacterEntity> Characters = new List<CharacterEntity>();
    private string suggestion = "AI Suggestion will be here...";
    private List<CharacterEntity> SelectedCharacters = new List<CharacterEntity>();


    protected override async Task OnInitializedAsync()
    {
        Stories = (await StoryService.GetAllAsync()).ToList();
        Characters = (await CharacterService.GetAllAsync()).ToList();
    }

    private async Task AddScene()
    {
        Scene.Characters = SelectedCharacters;
        await SceneService.CreateAsync(Scene);
        NavigationManager.NavigateTo("/sceneList");
    }

    private void OnStoryChange(ChangeEventArgs e)
    {
        var storyId = e.Value!.ToString();
        if (!string.IsNullOrEmpty(storyId))
        {
            var id = Guid.Parse(e.Value!.ToString()!);
            Scene.Story = Stories.FirstOrDefault(s => s.Id == id) ?? new StoryEntity();
        }
    }

    private async Task GenerateSuggestion()
    {
        MainLayout.ShowLoading(true);
        suggestion = await AIService.GetSceneDescription(Scene) ?? string.Empty;
        MainLayout.ShowLoading(false);
    }

    private void OnCharacterChange(ChangeEventArgs e)
    {
        SelectedCharacters.Clear();
        List<CharacterEntity> newSelectedCharacters = new List<CharacterEntity>();
        var selectedValues = e.Value as string[];
        selectedValues ??= Array.Empty<string>();
        foreach (var item in selectedValues)
        {
            var id = Guid.Parse(item);
            var character = Characters.FirstOrDefault(c => c.Id == id);
            if (character != null)
            {
                newSelectedCharacters.Add(character);
            }
        }
        SelectedCharacters = newSelectedCharacters;
        StateHasChanged();
    }
}
